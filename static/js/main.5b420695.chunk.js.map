{"version":3,"sources":["components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","services/localStorage.js","index.js"],"names":["ContactForm","addContact","contacts","useState","name","setName","number","setNumber","handleChange","e","target","value","reset","onSubmit","preventDefault","some","alert","onChange","type","placeholder","pattern","title","required","Filter","filter","ContactList","filterContacts","deleteContact","map","id","onClick","CONTACTS_KEY","App","setContacts","setFilter","useEffect","savedContacts","key","JSON","parse","localStorage","getItem","error","get","setItem","stringify","save","obj","nanoid","prevContacts","contact","toLowerCase","includes","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5b420695.chunk.js","sourcesContent":["import { useState } from \"react\";\n\nconst ContactForm = ({ addContact, contacts }) => {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    contacts.some(({ name }) => name === e.target.name.value)\n      ? alert(`${name} is already in contacts`)\n      : addContact({ name, number });\n\n    reset();\n  };\n\n  const handleChange = e => {\n    switch (e.target.name) {\n      case \"name\":\n        setName(e.target.value);\n        break;\n      case \"number\":\n        setNumber(e.target.value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const reset = () => {\n    setName(\"\");\n    setNumber(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        onChange={handleChange}\n        value={name}\n        type=\"text\"\n        name=\"name\"\n        placeholder=\"Name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n      />\n      <input\n        onChange={handleChange}\n        value={number}\n        type=\"tel\"\n        name=\"number\"\n        placeholder=\"Number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n      />\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n\nexport default ContactForm;\n","const Filter = ({ filter, value }) => {\n  return (\n    <input\n      onChange={value}\n      value={filter}\n      type=\"text\"\n      name=\"filter\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      required\n    />\n  );\n};\n\nexport default Filter;\n","const ContactList = ({ filterContacts, deleteContact }) => {\n  return (\n    <ul>\n      {filterContacts().map(({ id, name, number }) => {\n        return (\n          <li key={id}>\n            <p>\n              {name}: {number}\n            </p>\n            <button onClick={() => deleteContact(id)} type=\"button\">\n              Delete\n            </button>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ContactList;\n","import { useState, useEffect } from \"react\";\nimport ContactForm from \"./components/ContactForm/ContactForm.jsx\";\nimport Filter from \"./components/Filter/Filter.jsx\";\nimport ContactList from \"./components/ContactList/ContactList.jsx\";\nimport { nanoid } from \"nanoid\";\nimport { get, save } from \"./services/localStorage\";\n\nconst CONTACTS_KEY = \"contacts\";\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const savedContacts = get(CONTACTS_KEY);\n    if (savedContacts) setContacts(savedContacts);\n  }, []);\n\n  useEffect(() => {\n    save(CONTACTS_KEY, contacts);\n  }, [contacts]);\n\n  const addContact = ({ name, number }) => {\n    const obj = {\n      id: nanoid(5),\n      name,\n      number,\n    };\n    setContacts(prevContacts => [...prevContacts, obj]);\n  };\n\n  const handleChange = e => {\n    setFilter(e.target.value);\n  };\n\n  const filterContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteContact = id =>\n    setContacts(prevContacts =>\n      prevContacts.filter(contact => contact.id !== id)\n    );\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm contacts={contacts} addContact={addContact} />\n      <h2>Contacts</h2>\n      <Filter filter={filter} value={handleChange} />\n      <ContactList\n        contacts={contacts}\n        filterContacts={filterContacts}\n        deleteContact={deleteContact}\n      />\n    </div>\n  );\n};\n\nexport default App;\n","const save = (key, value) => {\n  try {\n    localStorage.setItem(key, JSON.stringify(value));\n  } catch (error) {\n    return null;\n  }\n};\n\nconst get = (key) => {\n  try {\n    return JSON.parse(localStorage.getItem(key));\n  } catch (error) {\n    return null;\n  }\n};\n\nexport { get, save };\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}